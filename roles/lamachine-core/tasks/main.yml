---
    - when: ran_lamachine_core is not defined
      block:

        - name: "Configuration Overview"
          debug:
              var: "{{item}}"
          with_items:
              - lamachine_version
              - conf_name
              - ansible_distribution
              - ansible_distribution_version
              - ansible_skip_tags
              - ansible_python_interpreter
              - hostname
              - version
              - lamachine_path
              - locality
              - localenv_type
              - local_prefix
              - global_prefix
              - source_path
              - data_path
              - root
              - unix_user
              - homedir
              - prefer_distro
              - minimal
              - force_https
              - lm_base_url
              - oauth_client_id

        - name: "Outputting custom versions"
          debug:
              var: "{{customversion}}|to_json"
          when: version == "custom"

        - when: version == "custom" and ansible_distribution|lower == 'macosx'
          block:
            - name: "Checking custom versioning compatibility"
              debug:
                  msg: "IMPORTANT NOTE: Custom versioning is not supported on Mac OS X! Things may fail or not end up as expected!!"
            - name: "Giving you a minute to contemplate the above important note and/or the meaning of life..."
              wait_for: timeout=60

        - name: Checking force option
          debug:
              msg: Forcing recompilation of all packages
          when: force is defined

        - name: Checking whether we do a full run (skipped if not the case)
          debug:
              msg: Doing a full run
          tags: fullrunonly

        - when: flavour == "vagrant" and extra_disksize is defined and extra_disksize > 0 and locality == "global"
          block:

              - name: Installing required base packages to add extra disk (apt) #for now we only support debian (our VM default) for the extra disk option!
                become: true
                become_user: root
                apt:
                  name: [aptitude, parted, e2fsprogs]
                  state: present
                  update_cache: yes
                  cache_valid_time: 900
                when: (ansible_distribution|lower == "debian" or ansible_distribution|lower == "ubuntu" or ansible_distribution|lower == "linux mint") and root

              - name: "Adding extra LaMachine partition" #only if it does not exist yet
                become: yes
                become_user: root
                parted:
                  device: /dev/sdb
                  number: 1
                  state: present

              - name: "Formatting extra LaMachine partition" #only if it does not exist yet
                become: yes
                become_user: root
                filesystem:
                  dev: /dev/sdb1
                  fstype: ext4

              - name: Creating mountpoint
                become: yes
                become_user: root
                file:
                    path: "/mnt/lamachine"
                    mode: u+rwx,a+rx
                    state: directory

              - name: "Mounting extra LaMachine partition"
                become: yes
                become_user: root
                mount:
                  fstype: ext4
                  src: /dev/sdb1
                  path: /mnt/lamachine
                  state: mounted

              - name: Adding LaMachine partition to /etc/fstab
                become: yes
                become_user: root
                lineinfile:
                  dest=/etc/fstab
                  backup=yes
                  backrefs=yes
                  state=present
                  regexp='^/dev/sdb1'
                  line='/dev/sdb1    /mnt/lamachine   ext4   rw,errors=remount-ro,discard   0 0'

              - name: Migrating existing global prefix
                become: yes
                become_user: root
                shell: |
                  if [ -L "{{global_prefix}}" ]; then
                    echo "Nothing to migrate"
                    exit 2
                  elif [ -d "{{global_prefix}}" ]; then
                    mv {{global_prefix}}/* /mnt/lamachine
                    rm -rf {{global_prefix}}
                  fi
                args:
                  executable: /bin/bash
                register: migration
                changed_when: migration.rc != 2
                failed_when: migration.rc != 2 and migration.rc != 0

              - name: Ensure global prefix is a link to the extra disk
                become: "{{lm_become}}"
                become_user: root
                file:
                   src: "/mnt/lamachine"
                   dest: "{{global_prefix}}"
                   state: link

        - name: Create global prefix directory
          file:
              path: "{{global_prefix}}"
              mode: u+rwx,a+rx
              state: directory
          when: locality == "global" and not (flavour == "vagrant" and extra_disksize is defined and extra_disksize > 0)

        - name: "Forced cleaning: Removing sources"
          become: "{{lm_become}}"
          become_user: root
          shell: |
            cd {{source_path}} || exit 0
            for f in */; do
              if [[ "$f" != "LaMachine/" ]]; then
                rm -rfv $f
              fi
            done
          args:
            executable: /bin/bash
            chdir: "{{source_path}}"
          when: force is defined and force|int >= 2
          tags: fullrunonly

        - name: Create home bin directory
          file:
              path: "{{homedir}}/bin"
              mode: u+rwx,a+rx
              state: directory


        - name: Ensure home directory is world-traversable
          file:
              path: "{{homedir}}"
              mode: u+rwx,a+x
          when: locality == "global"

        - name: Ensure home/bin is in $PATH by default #necessary because this is where our activation script will reside
          blockinfile:
            dest: "{{item}}"
            block: |
              if [[ "$PATH" != *"{{homedir}}/bin"* ]]; then
                  export PATH=~/bin:$PATH #add ~/bin to $PATH, that is where the activation scripts are
              fi
            marker: '# {mark} LAMACHINE MANAGED BLOCK - path'
            insertafter: EOF
            create: yes
            mode: u+rwx
          with_items:
            - "{{homedir}}/.bashrc"
            - "{{homedir}}/.bash_profile" #login-shell (Mac OS X)
            - "{{homedir}}/.zshrc"


        - name: Set LaMachine update script
          template:
            src: lamachine-update.sh
            dest: "{{homedir}}/bin/lamachine-{{ conf_name }}-update"
            force: "yes"
            mode: u+rwx,a+rx

        - name: Set generic update script
          copy:
            dest: "{{homedir}}/bin/lamachine-update"
            content: |
                #!/bin/bash
                if [ -z "$LM_NAME" ]; then
                    if [ -e /etc/profile.d/lamachine-activate.sh ]; then
                        #will work for docker and other global installations
                        source /etc/profile.d/lamachine-activate.sh
                    else
                        echo "You are not in a LaMachine environment! Unable to update, activate one first!">&2
                        exit 2
                    fi
                fi
                if which "lamachine-$LM_NAME-update"; then
                     "lamachine-$LM_NAME-update" $@
                else
                     echo "Unable to find update script lamachine-$LM_NAME-update!">&2
                     exit 3
                fi
            mode: u+rwx,a+rx

        - name: Create LaMachine activation script
          template:
            src: lamachine-activate.sh
            dest: "{{homedir}}/bin/lamachine-{{ conf_name }}-activate"
            force: yes
            mode: u+rwx,a+rx


        - name: Link activation script to global environment
          become: "{{lm_become}}"
          become_user: root
          file:
            src: "{{homedir}}/bin/lamachine-{{conf_name}}-activate"
            dest: "{{global_prefix}}/bin/lamachine-{{conf_name}}-activate"
            state: link
          when: locality == "global"

        - name: Link update script to global environment
          become: "{{lm_become}}"
          become_user: root
          file:
            src: "{{homedir}}/bin/lamachine-{{conf_name}}-update"
            dest: "{{global_prefix}}/bin/lamachine-{{conf_name}}-update"
            state: link
          when: locality == "global"

        - name: Link generic update script to global environment
          become: "{{lm_become}}"
          become_user: root
          file:
            src: "{{homedir}}/bin/lamachine-update"
            dest: "{{global_prefix}}/bin/lamachine-update"
            state: link
          when: locality == "global"

        - import_tasks: debian.yml
          when: (ansible_distribution|lower == "debian" or ansible_distribution|lower == "ubuntu" or ansible_distribution|lower == "linux mint") and root
          tags: fullrunonly

        - import_tasks: redhat.yml
          when: (ansible_distribution|lower == 'redhat' or ansible_distribution|lower == 'centos' or ansible_distribution|lower == 'fedora') and root
          tags: fullrunonly

        - import_tasks: arch.yml
          when: (ansible_distribution|lower == 'archlinux' or ansible_distribution|lower == 'manjaro') and root
          tags: fullrunonly

        - import_tasks: macosx.yml
          when: (ansible_distribution|lower == 'macosx')
          tags: fullrunonly

        - import_tasks: virtualenv.yml
          when: localenv_type == 'virtualenv' and locality == "local"
          tags: fullrunonly

        - name: Enable sudo access to LaMachine
          become: yes
          copy:
            dest: "/etc/sudoers.d/lamachine"
            content: |
                     Defaults env_keep += "PYTHONPATH"
                     Defaults secure_path = {{global_prefix}}/bin:{{global_prefix}}/sbin:/sbin:/bin:/usr/sbin:/usr/bin
          when: locality == "global" and root

        - name: Enable activation script globally
          become: "{{lm_become}}"
          become_user: root
          copy:
            dest: "/etc/profile.d/lamachine-activate.sh"
            content: |
              #!/bin/bash
              export PATH={{global_prefix}}/bin:$PATH
              source {{global_prefix}}/bin/lamachine-{{conf_name}}-activate
            mode: a+rx
          when: locality == "global"

        - name: Link default activation script (local)
          file:
             src: "{{homedir}}/bin/lamachine-{{conf_name}}-activate"
             dest: "{{homedir}}/bin/lamachine-activate"
             state: link

        - name: Link default activation script (global)
          become: "{{lm_become}}"
          become_user: root
          file:
             src: "{{homedir}}/bin/lamachine-{{conf_name}}-activate"
             dest: "{{global_prefix}}/bin/lamachine-activate"
             state: link
          when: locality == "global"


        - name: Backward compatibility update script
          file:
            src: "{{homedir}}/bin/lamachine-{{ conf_name }}-update"
            dest: "{{homedir}}/bin/lamachine-update.sh"
            force: true
            state: link

        - name: Create source directory
          become: "{{lm_become}}"
          become_user: root
          file:
              path: "{{ source_path }}"
              state: directory
              owner: "{{unix_user}}"
              group: "{{unix_group}}"
              mode: u+rwx,g+rwsx,a+rx

        - name: Create shared data directory
          become: "{{lm_become}}"
          become_user: root
          file:
              path: "{{ data_path }}"
              state: directory
              owner: "{{unix_user}}"
              group: "{{unix_group}}"
              mode: u+rwx,g+rwsx,a+rx
          when: "data_path != homedir"
          ignore_errors: yes

        - name: Create directories
          become: "{{lm_become}}"
          become_user: root
          file:
              path: "{{ lm_prefix }}/{{item}}"
              state: directory
              owner: "{{unix_user}}"
              group: "{{unix_group}}"
              mode: u+rwx,g+rwsx,a+rx
          with_items:
              - bin
              - "bin/activate.d"
              - etc
              - lib
              - include
              - sbin
              - share
              - opt
              - var
              - "var/log"
              - "var/run"

        - name: Install motd
          become: "{{lm_become}}"
          become_user: root
          template:
            src: motd
            dest: "{{lm_prefix}}/etc/motd"
            force: yes
            backup: yes
            mode: u+rwx,a+rx

        - name: Installing lamachine-add script
          become: "{{lm_become}}"
          become_user: root
          template:
            src: lamachine-add.py
            dest: "{{lm_prefix}}/bin/lamachine-add"
            force: yes
            mode: u+rwx,a+rx

        - name: Installing lamachine-passwd script
          become: "{{lm_become}}"
          become_user: root
          template:
            src: lamachine-passwd.py
            dest: "{{lm_prefix}}/bin/lamachine-passwd"
            force: yes
            mode: u+rwx,a+rx

        - name: Installing lamachine-config script
          become: "{{lm_become}}"
          become_user: root
          template:
            src: lamachine-config.sh
            dest: "{{lm_prefix}}/bin/lamachine-config"
            force: yes
            mode: u+rwx,a+rx

        - name: Installing SSH public key (if provided and none exists yet)
          become: "{{lm_become}}"
          become_user: root
          copy:
            dest: "/home/{{unix_user}}/.ssh/{{ssh_key_filename}}.pub"
            content: "{{ssh_public_key}}"
            force: no
            mode: u+rw,g+r,o+r
            owner: "{{unix_user}}"
            group: "{{unix_group}}"
          when: ssh_private_key and ssh_public_key

        - name: Installing SSH private key (if provided and none exists yet)
          become: "{{lm_become}}"
          become_user: root
          copy:
            dest: "/home/{{unix_user}}/.ssh/{{ssh_key_filename}}"
            content: "{{ssh_private_key}}"
            force: no
            mode: u+rw,g-rwx,o-rwx
            owner: "{{unix_user}}"
            group: "{{unix_group}}"
          when: ssh_private_key and ssh_public_key

        - name: Check existence of LaMachine source dir (migration v2.0.0 -> v2.0.1)
          stat:
             path: "{{ lm_prefix }}/LaMachine"
          register: lamachine_v2_0_0_source

        - name: Copy LaMachine controller to prefix
          become: "{{lm_become}}"
          become_user: root
          shell: |
              if [[ -e "{{lamachine_path}}/bootstrap.sh" ]] && [[ ! -e "{{source_path}}/LaMachine/bootstrap.sh" ]]; then
                if [[ "{{source_path}}" != "{{lamachine_path}}/"* ]]; then
                  echo "Copy {{lamachine_path}} -> {{source_path}}/LaMachine">&2
                  cp -Rp "{{lamachine_path}}" "{{source_path}}/LaMachine"
                  exit $?
                else
                  #source path is nested inside lamachine_path (usually bootstrap.sh was run inside a LaMachine git clone)
                  #copy would recurse endlessly, link instead:
                  ln -s "{{lamachine_path}}" "{{source_path}}/LaMachine"
                  exit $?
                fi
              else
                exit 123
              fi
          args:
            executable: /bin/bash
          register: controllercopy
          when: (controller is defined and controller == "internal") or lamachine_v2_0_0_source.stat.exists
          failed_when: controllercopy.rc > 0 and controllercopy.rc != 123
          changed_when: controllercopy.rc > 0 and controllercopy.rc != 123


        - name: LaMachine source dir migration (v2.0.0 -> v2.0.1)
          become: "{{lm_become}}"
          become_user: root
          file:
             path: "{{ lm_prefix }}/LaMachine"
             state: absent

        - name: Create local Ansible hosts file
          copy:
            dest: "{{source_path}}/LaMachine/hosts.ini"
            content: "{{hostname}} ansible_connection=local"
            mode: a+r
            force: "no"
          when: controller is defined and controller == "internal"

        - name: Adding global library path to ldconfig
          become: yes
          copy:
            dest: "/etc/ld.so.conf.d/lamachine-{{conf_name}}.conf"
            content: "{{global_prefix}}/lib"
            mode: a+r
          when: root and locality == "global" and ansible_distribution|lower != 'macosx'

        - name: Running ldconfig
          become: yes
          command: ldconfig -v
          when: root and locality == "global" and ansible_distribution|lower != 'macosx'

        - name: Compiling boost from source for CentOS/RHEL  7 (may take quite a while!)
          shell: |
              #!/bin/bash
              if [ ! -d boost_1_66_0 ]; then
                  wget -q https://dl.bintray.com/boostorg/release/1.66.0/source/boost_1_66_0.tar.gz || exit 2
                  tar xf boost_1_66_0.tar.gz || exit 2
                  cd boost_1_66_0
                  ./bootstrap.sh  --with-python=python3.6 --with-python-version=3.6 --prefix="{{lm_prefix}}" || exit 2
                  ./b2 install --config=project-config.jam --prefix="{{lm_prefix}}" --with=all
                  if [ ! -e "{{lm_prefix}}/include/boost" ]; then
                    ln -s "{{source_path}}/boost_1_66_0/boost" "{{lm_prefix}}/include/boost"
                    exit $?
                  fi
                  exit 0
              else
                  exit 0
              fi
          args:
              executable: /bin/bash
              chdir: "{{source_path}}"
          when: (ansible_distribution|lower == "centos" or ansible_distribution|lower == "rhel") and ansible_distribution_major_version|int == 7

        - block:
            - name: Obtaining local environment's Python version
              shell: python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))'
              register: python_version
              environment: "{{lm_env}}"
              changed_when: False
          rescue:
            - fail:
                msg: "The Python inside LaMachine's Virtual Environment is not functioning. This may be caused by a major upgrade of the system python and removal of the older one. We can not recover automatically at this point so we recommend to create a new LaMachine environment from scratch by following the instructions on https://proycon.github.io/LaMachine. You will most likely want to delete the current environment ({{local_prefix}}) first, assuming you stored no valuable data inside. If you really want to ignore this message and attempt to continue upgrading anyway, add the parameter nopythoncheck=1 when invoking lamachine-update."
              when: locality == "local" and (nopythoncheck is not defined or nopythoncheck == 0)

        - name: Linking to current python library path (global)
          become: "{{lm_become}}"
          become_user: root
          file:
             src: "{{global_prefix}}/{{item}}/python{{python_version.stdout}}" #should ignore when it does not exist
             dest: "{{global_prefix}}/{{item}}/python-current"
             state: link
             force: yes
          with_items:
             - lib
             - lib64 #this is used on some distributions like CentOS
          ignore_errors: yes
          when: locality == "global"

        - name: Obtaining global Python version
          shell: |
                 #!/bin/bash
                 if which "{{ python_bin }}"; then
                  {{python_bin}} -c 'import sys; print(".".join(map(str, sys.version_info[:2])))'
                 fi
          args:
            executable: /bin/bash
          register: global_python_version
          ignore_errors: True
          changed_when: False

        - name: Testing whether virtualenv python is outdated
          fail:
            msg: "The global Python 3 on this system has been updated to {{ global_python_version.stdout }} and is now newer than the Python in this virtual environment ({{python_version.stdout}}). This may cause issues so we recommend to create a new LaMachine environment from scratch by following the instructions on https://proycon.github.io/LaMachine. You will most likely want to delete the current environment ({{local_prefix}}) first, assuming you stored no valuable data inside. If you really want to ignore this message and attempt to continue upgrading anyway, add the parameter nopythoncheck=1 when invoking lamachine-update."
          when: global_python_version.stdout != "" and global_python_version.stdout > python_version.stdout and locality == "local" and localenv_type == "virtualenv" and (nopythoncheck is not defined or nopythoncheck == 0)

          #fairly nasty patch to solve issue #192
        - name: Installing python-apt into virtual environment
          shell: |
              #!/bin/sh
              if [ ! -d python3-apt ]; then
                  apt-get download python3-apt #we continue if this fails because it may fail with an unrelated permission error and still deliver the expected result
                  dpkg -x python3-apt*.deb python3-apt || exit 1
                  cp -r python3-apt/usr/lib/python3/dist-packages/* {{local_prefix}}/lib/python{{ python_version.stdout }}/site-packages/ || exit 1
                  cd {{local_prefix}}/lib/python{{ python_version.stdout }}/site-packages/ || exit 1
                  mv apt_pkg.*.so apt_pkg.so || exit 1
                  mv apt_inst.*.so apt_inst.so || exit 1
                  exit 2 #we use this as an extra success code to indicate changes have been made
              fi
          environment: "{{lm_env}}"
          args:
              chdir: "{{source_path}}"
          when: locality == "local" and localenv_type == "virtualenv" and (ansible_distribution|lower == 'debian' or ansible_distribution|lower == 'ubuntu' or ansible_distribution|lower == "linux mint")
          register: python3apt
          changed_when: python3apt.rc == 2
          failed_when: python3apt.rc > 0 and python3apt.rc != 2
          tags: fullrunonly

        - name: Upgrade pip #we need at least pip10, this is not always the case in distro-supplied packages
          become: "{{lm_become}}"
          become_user: root
          shell: pip3 install --upgrade pip {% if locality == 'global' %}--prefix "{{ lm_prefix }}"{% endif %}
          environment: "{{lm_env}}"
          tags: fullrunonly

        - name: Upgrade setuptools
          become: "{{lm_become}}"
          become_user: root
          shell: pip3 install --upgrade setuptools {% if locality == 'global' %}--prefix "{{ lm_prefix }}"{% endif %}
          environment: "{{lm_env}}"
          tags: fullrunonly

        - name: Upgrade wheel
          become: "{{lm_become}}"
          become_user: root
          shell: pip3 install --upgrade wheel {% if locality == 'global' %}--prefix "{{ lm_prefix }}"{% endif %}
          environment: "{{lm_env}}"
          tags: fullrunonly

        - name: Installing ansible locally (virtualenv linux)
          pip:
              name: "ansible"
              state: latest
              virtualenv: "{{ local_prefix }}"
          when: locality == "local" and localenv_type == "virtualenv" and ansible_distribution|lower != 'macosx'
          tags: fullrunonly

        - name: Installing ansible locally (virtualenv macOS)
          shell: |
              #!/bin/bash
              export LDFLAGS="-L/usr/local/opt/openssl/lib"
              export CPPFLAGS="-I/usr/local/opt/openssl/include"
              export PKG_CONFIG_PATH="/usr/local/opt/openssl/lib/pkgconfig"
              pip install ansible
          environment: "{{lm_env}}"
          when: locality == "local" and localenv_type == "virtualenv" and ansible_distribution|lower == 'macosx'
          tags: fullrunonly

        - name: Sending anonymous usage analytics to LaMachine creators
          shell: |
              #!/bin/bash
              #Sending some statistics to us so we know how often and on what systems LaMachine is used
              #recipient: Language Machines, Centre for Language Studies, Radboud University Nijmegen
              #
              #Transmitted are:
              # - The form in which you run LaMachine (vagrant/virtualenv/docker)
              # - Is it a new LaMachine installation or an update
              # - Stable or Development?
              # - The OS you are running on and its version
              # - Your Python version
              #
              #This information will never be used for any form of advertising
              #Your IP will only be used to compute country of origin, resulting reports will never contain personally identifiable information
              PYTHONVERSION=`python3 -c 'import sys; print(".".join(map(str, sys.version_info[:3])))'`
              if [ ! -e .reply ]; then
                MODE=new
              else
                MODE=update
              fi
              wget --timeout 10 -O - -q "http://applejack.science.ru.nl/lamachinetracker.php/{{ locality }}{% if locality == 'local' %}-{{ localenv_type }}{% else %}{% if flavour is defined %}-{{ flavour }}{% endif %}{% endif %}/$MODE/{{ version }}/$PYTHONVERSION/{{ ansible_distribution|lower }}/{{ ansible_distribution|lower }}/{{ ansible_distribution_version }}"  > .reply
          args:
              chdir: "{{source_path}}"
          when: private is not defined or not private


        - name: "Finding global pip3"
          shell: hash -r pip3 && which {{pip_bin}}
          register: pip
          environment: "{{lm_env}}"
          when: locality == "global"

        - name: "Testing global pip3"
          shell: |
            #!/bin/bash
            {{python_bin}} -c "import pip; print(pip.__path__[0])"
            {{pip_bin}} list
          environment: "{{lm_env}}"
          args:
            executable: /bin/bash
          when: locality == "global"

        - name: Recreate LaMachine activation script (2nd time) #needed because the PYTHONPATH might not have been set earlier yet
          template:
            src: lamachine-activate.sh
            dest: "{{homedir}}/bin/lamachine-{{ conf_name }}-activate"
            force: yes
            mode: u+rwx,a+rx

        - name: Install LaMachine list script
          template:
            src: lamachine-list
            dest: "{{lm_prefix}}/bin/lamachine-list"
            force: "yes"
            mode: u+rwx,a+rx

        - name: Install LaMachine registry build script
          template:
            src: lamachine-build-registry
            dest: "{{lm_prefix}}/bin/lamachine-build-registry"
            force: "yes"
            mode: u+rwx,a+rx

        - name: Create metadata directory
          file:
              path: "{{ lm_prefix }}/var/metadata"
              state: directory
              owner: "{{unix_user}}"
              group: "{{unix_group}}"
              mode: u+rwx,g+rwsx,a+rx

        - name: Installing CodeMetaPy, needed for registering metadata
          include_role:
            name: lamachine-python-install
          vars:
            package: { github_user: "proycon", github_repo: "codemetapy", pip: "codemetapy", version: "0.3.5", git_branch: "v0.3.5" }

        - name: Registering extra metadata
          include_role:
              name: lamachine-register
          vars:
              url: "{% if 'url' in item %}{{item.url}}{% else %}{% endif %}"
              codemeta: "{% if 'codemeta' in item %}{{item.codemeta}}{% else %}{% endif %}"
              metadata: "{% if 'metadata' in item %}{{item.metadata}}{% else %}{}{% endif %}"
          when: metadata_extra is defined and metadata_extra
          with_items: "{{metadata_extra}}"
          tags: fullrunonly

        - name: "Register metadata for certain base packages (apt/debian)" #should be in debian.yml but codemetapy is not available at that stage yet, so we do it here for now:
          shell: |
            #!/bin/bash
            apt show {{item}} | {{lm_prefix}}/bin/codemetapy --with-entrypoints -i apt - > {{lm_prefix}}/var/metadata/{{item|lower}}.json
          args:
            executable: /bin/bash
          environment: "{{lm_env}}"
          when: (ansible_distribution|lower == "debian" or ansible_distribution|lower == "ubuntu" or ansible_distribution|lower == "linux mint")
          with_items: [python3, libboost-python, libicu, libxml2, libxslt1, gcc, g++, autoconf, automake, libaspell, libhunspell, curl]
          tags: fullrunonly

        - import_tasks: webserver.yml
          when: webserver is defined and webserver
          tags: fullrunonly

        - name: "Adding custom activation script"
          become: "{{lm_become}}"
          become_user: root
          copy:
            dest: "{{lm_prefix}}/bin/activate.d/custom.sh"
            content: |
              #You can use this file to add custom activations
            force: no
            mode: u+rwx,a+rx

        - name: Determine available groups
          getent:
            database: group
          when: "ansible_distribution|lower != 'macosx'"

        - name: "Adding user to vboxsf group for shared folder access (if it exists)"
          become: "{{lm_become}}"
          become_user: root
          user:
            name: "{{unix_user}}"
            groups: "vboxsf"
            append: yes
          when: "ansible_distribution|lower != 'macosx' and 'vboxsf' in getent_group"
          ignore_errors: yes

        - name: Obtaining docker-container-init
          include_role:
            name: lamachine-git
          vars:
            package:
              user: pasztorpisti
              repo: docker-container-init
          when: locality == "global"

        - name: Compiling and installing docker-container-init
          become: "{{lm_become}}"
          become_user: root
          command: "gcc -o {{lm_prefix}}/bin/docker-container-init {{source_path}}/docker-container-init/docker-container-init.c"
          when: locality == "global"


    - set_fact: ran_lamachine_core=1


