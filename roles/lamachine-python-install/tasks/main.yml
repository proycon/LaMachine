---
- name: "Installing Python Package: overview :: package"
  debug:
       var: package

- name: "Installing Python Package: overview :: do_registration"
  debug:
       var: do_registration

- when: "'exclude_when' not in package or not package.exclude_when|bool"
  block:
    - name: "{% if 'github_repo' in package %}{{package.github_repo}}{% else %}(NOT APPLICABLE){% endif %} - Installing from github (development/custom)"
      block:
        - name: "{{package.github_repo}} - Git clone/pull {% if 'git_branch' in package %}{{ package.git_branch }}{% endif %}" #we always do this, even if we're not using the source for installation (we still need to check for codemeta.json)
          git:
            repo: "https://github.com/{{package.github_user}}/{{package.github_repo}}"
            dest: "{{ source_path }}/{{ package.github_repo }}"
            version: "{% if 'git_branch' in package and package.git_branch %}{{ package.git_branch }}{% elif 'version' in package and package.version %}{{ package.version }}{% elif version == 'custom' and 'pip' in package and package.pip.lower() in customversion and customversion[package.pip.lower()] != 'development' and customversion[package.pip.lower()] != 'stable' %}{{ customversion[package.pip.lower()]|version_v }}{% elif version == 'custom' and 'pip' not in package and package.github_repo.lower() in customversion and customversion[package.github_repo.lower()] != 'development' and customversion[package.github_repo.lower()] != 'stable' %}{{ customversion[package.github_repo.lower()]|version_v }}{% else %}master{% endif %}"
            recursive: yes
            update: yes
            accept_hostkey: yes
          environment: "{{lm_env}}"
          when: '"github_user" in package and package.github_user != "" and "github_repo" in package and package.github_repo != "" and ("ignore_git" not in package or not package.ignore_git)'

    - name: "{% if 'name' in package %}{{package.name}}{% else %}(NOT APPLICABLE){% endif %} - Installing from other git source (development/custom)"
      block:
        - name: "{{package.name}} - Git clone/pull {% if 'git_branch' in package %}{{ package.git_branch }}{% endif %}" #we always do this, even if we're not using the source for installation (we still need to check for codemeta.json)
          git:
            repo: "{{package.git_url}}"
            dest: "{{ source_path }}/{{ package.name }}"
            version: "{% if 'git_branch' in package and package.git_branch %}{{ package.git.branch }}{% elif 'version' in package and package.version %}{{ package.version }}{% elif version == 'custom' and 'pip' in package and package.pip.lower() in customversion and customversion[package.pip.lower()] != 'development' and customversion[package.pip.lower()] != 'stable' %}{{ customversion[package.pip.lower()]|version_v }}{% elif version == 'custom' and 'pip' not in package and package.github_repo.lower() in customversion and customversion[package.github_repo.lower()] != 'development' and customversion[package.github_repo.lower()] != 'stable' %}{{ customversion[package.github_repo.lower()]|version_v }}{% else %}master{% endif %}"
            recursive: yes
            update: yes
            accept_hostkey: yes
          environment: "{{lm_env}}"
          when: '"name" in package and package.name != "" and "git_url" in package and package.git_url != "" and ("ignore_git" not in package or not package.ignore_git)'

    - block:
        - name: "{{package.github_repo}} - Installing python package (development/custom)"
          become: "{{lm_become}}"
          become_user: root
          shell: |
            #!/bin/bash
            {% if 'setup' in package and package.setup %}
            python3 {% if 'setup' in package and package.setup %}{{package.setup}}{% else %}setup.py{% endif %} install {% if locality == 'global' %}--prefix {{lm_prefix}}{% endif %}
            {% else %}
            {% if locality == 'local' %}{{ local_prefix }}/bin/pip{% else %}{{pip.stdout}}{% endif %} install --upgrade-strategy only-if-needed {% if locality == 'global' %}--prefix {{lm_prefix}}{% endif %} {% if ('force' in package and package.force) or (force is defined and force) %} --force-reinstall --no-cache{% endif %}.
            {% endif %}
          args:
            executable: /bin/bash
            chdir: "{{ source_path }}/{{package.github_repo}}{% if 'setupdir' in package %}/{{ package.setupdir }}{% endif %}"
          environment: "{{lm_env}}"
          when: '"github_user" in package and package.github_user != "" and "github_repo" in package and package.github_repo != "" and (version == "development" or ("pip" not in package or package.pip == ""))' #always use this when there is no pip version
      rescue:
        - name: "{% if 'github_repo' in package %}{{package.github_repo}}{% else %}{{package.name}}{% endif %} - Installing python package (development/custom) (fallback with --ignore-installed)"
          become: "{{lm_become}}"
          become_user: root
          shell: |
            #!/bin/bash
            {% if 'setup' in package and package.setup %}
            python3 {% if 'setup' in package and package.setup %}{{package.setup}}{% else %}setup.py{% endif %} install {% if locality == 'global' %}--prefix {{lm_prefix}}{% endif %}
            {% else %}
            {% if locality == 'local' %}{{ local_prefix }}/bin/pip{% else %}{{pip.stdout}}{% endif %} install {% if locality == 'global' %}--prefix {{lm_prefix}}{% endif %} --upgrade-strategy only-if-needed {% if ('force' in package and package.force) or (force is defined and force) %} --force-reinstall --no-cache{% endif %} --ignore-installed . #only last option is different
            {% endif %}
          args:
            executable: /bin/bash
            chdir: "{{ source_path }}/{% if 'github_repo' in package %}{{package.github_repo}}{% else %}{{package.name}}{% endif %}{% if 'setupdir' in package %}/{{ package.setupdir }}{% endif %}"
          environment: "{{lm_env}}"

    - name: "{{package.name}} - Installing python package (development/custom) from other git source"
      become: "{{lm_become}}"
      become_user: root
      shell: |
        #!/bin/bash
        {% if 'setup' in package and package.setup %}
        python3 {% if 'setup' in package and package.setup %}{{package.setup}}{% else %}setup.py{% endif %} install {% if locality == 'global' %}--prefix {{lm_prefix}}{% endif %}
        {% else %}
        {% if locality == 'local' %}{{ local_prefix }}/bin/pip{% else %}{{pip.stdout}}{% endif %} install --upgrade-strategy only-if-needed {% if locality == 'global' %}--prefix {{lm_prefix}}{% endif %} .
        {% endif %}
      args:
        executable: /bin/bash
        chdir: "{{ source_path }}/{{package.name}}{% if 'setupdir' in package %}/{{ package.setupdir }}{% endif %}"
      environment: "{{lm_env}}"
      when: '"name" in package and package.name != "" and "git_url" in package and package.git_url != "" and (version == "development" or ("pip" not in package or package.pip == ""))' #always use this when there is no pip version

    - block:
       - name: "{% if 'pip' in package %}{{package.pip}}{% else %}(NOT APPLICABLE){% endif %} - Installing custom version from the Python Package Index"
         become: "{{lm_become}}"
         become_user: root
         pip:
              name: "{{package.pip}}"
              state: "{% if force is defined and force %}forcereinstall{% elif 'state' in package and package.state %}{{package.state}}{% else %}present{% endif %}"
              executable: "{% if locality == 'local' %}{{ local_prefix }}/bin/pip{% else %}{{pip.stdout}}{% endif %}"
              version: "{% if 'version' in package and package.version %}{{package.version}}{% elif version == 'custom' and package.pip.lower() in customversion and customversion[package.pip.lower()] != 'stable' and customversion[package.pip.lower()] != 'development' %}{{customversion[package.pip.lower()]|version_n}}{% endif %}"
              extra_args: "--upgrade-strategy only-if-needed {% if locality == 'global' %}--prefix {{lm_prefix}}{% endif %}"
         environment: "{{lm_env}}"
         register: pipinstall
         when: ("pip" in package and package.pip != "" and ((version == "custom" and package.pip.lower() in customversion and customversion[package.pip.lower()] != "stable")  or ('version' in package and package.version and package.version != "stable")))
      rescue:
       - name: "{% if 'pip' in package %}{{package.pip}}{% else %}(NOT APPLICABLE){% endif %} - Installing custom version from the Python Package Index (Without uninstalling)"
         become: "{{lm_become}}"
         become_user: root
         pip:
              name: "{{package.pip}}"
              state: "{% if force is defined and force %}forcereinstall{% elif 'state' in package and package.state %}{{package.state}}{% else %}present{% endif %}"
              executable: "{% if locality == 'local' %}{{omit}}{% else %}{{pip.stdout}}{% endif %}"
              version: "{% if 'version' in package and package.version %}{{package.version}}{% elif version == 'custom' and package.pip.lower() in customversion and customversion[package.pip.lower()] != 'stable' and customversion[package.pip.lower()] != 'development' %}{{customversion[package.pip.lower()]|version_n}}{% endif %}"
              virtualenv: "{% if locality == 'local' %}{{ local_prefix }}{% else %}{{ omit }}{% endif %}"
              extra_args: "--upgrade-strategy only-if-needed {% if locality == 'global' %}--prefix {{lm_prefix}}{% endif %}{% if ('force' in package and package.force) or (force is defined and force) %} --force-reinstall --no-cache{% endif %} --ignore-installed" #only last option is different
         environment: "{{lm_env}}"
         #when: "'would lead only to a partial uninstall' in pipinstallstable.stderr"


    - block:
        - name: "{% if 'pip' in package %}{{package.pip}}{% else %}(NOT APPLICABLE){% endif %} - Installing latest release from the Python Package Index (stable)"
          become: "{{lm_become}}"
          become_user: root
          pip:
               name: "{{package.pip}}"
               state: "{% if force is defined and force %}forcereinstall{% elif 'state' in package and package.state %}{{package.state}}{% else %}latest{% endif %}"
               executable: "{% if locality == 'local' %}{{omit}}{% else %}{{pip.stdout}}{% endif %}"
               virtualenv: "{% if locality == 'local' %}{{ local_prefix }}{% else %}{{ omit }}{% endif %}"
               extra_args: "--upgrade-strategy only-if-needed {% if locality == 'global' %}--prefix {{lm_prefix}}{% endif %}{% if ('force' in package and package.force) or (force is defined and force) %} --force-reinstall --no-cache{% endif %}"
          environment: "{{lm_env}}"
          register: pipinstallstable
          when: ("pip" in package and package.pip != "" and ('version' not in package or not package.version) and (version == "stable" or (version == "development" and ("github_user" not in package or package.github_user == "")) or (version == "custom" and package.pip.lower() in customversion and customversion[package.pip.lower()] == "stable")))
      rescue:
        - name: "{% if 'pip' in package %}{{package.pip}}{% else %}(NOT APPLICABLE){% endif %} - Installing latest release from the Python Package Index (stable) (fallback with --ignore-installed)"
          become: "{{lm_become}}"
          become_user: root
          pip:
               name: "{{package.pip}}"
               state: "{% if force is defined and force %}forcereinstall{% elif 'state' in package and package.state %}{{package.state}}{% else %}latest{% endif %}"
               executable: "{% if locality == 'local' %}{{omit}}{% else %}{{pip.stdout}}{% endif %}"
               virtualenv: "{% if locality == 'local' %}{{ local_prefix }}{% else %}{{ omit }}{% endif %}"
               extra_args: "--upgrade-strategy only-if-needed {% if locality == 'global' %}--prefix {{lm_prefix}}{% endif %}{% if ('force' in package and package.force) or (force is defined and force) %} --force-reinstall --no-cache{% endif %} --ignore-installed" #only last option is different
          environment: "{{lm_env}}"
          #when: "'would lead only to a partial uninstall' in pipinstallstable.stderr"

    - block:
        - name: "{% if 'pip' in package %}{{package.pip}}{% elif 'github_repo' in package %}{{package.github_repo}}{% else %}{{package.name}}{% endif %} -  Verifying installation"
          shell: |
              #!/bin/bash
              {% if 'pip' in package %}
               {% if locality == 'local' %}{{ local_prefix }}/bin/pip{% else %}{{pip.stdout}}{% endif %} list | grep -i -e pip -e "{{package.pip}}"
              {% elif 'github_repo' in package %}
               {% if locality == 'local' %}{{ local_prefix }}/bin/pip{% else %}{{pip.stdout}}{% endif %} list | grep -i -e pip -e "{{package.github_repo}}"
              {% elif 'name' in package %}
               {% if locality == 'local' %}{{ local_prefix }}/bin/pip{% else %}{{pip.stdout}}{% endif %} list | grep -i -e pip -e "{{package.name}}"
              {% endif %}
          environment: "{{lm_env}}"
      rescue:
        - name: "Pip failure, debug"
          shell: |
              #!/bin/bash
              echo "PYTHONPATH: $PYTHONPATH"
              echo "PATH: $PATH"
              echo "ls -l {{pip.stdout}}"
              ls -l "{{pip.stdout}}"
              echo "which pip3"
              which pip3
              echo "which python3"
              which pip3
              echo "pip.__path__"
              python3 -c "import pip; print(pip.__path__[0])"
              echo "pip3 contents:"
              cat $(which pip3)
              echo "ls python-current:"
              ls -ld /usr/local/lib/python-current/*
              echo "ls python-current site packages:"
              ls -ld /usr/local/lib/python-current/site-packages/*
          environment: "{{lm_env}}"
        - fail:
            msg: "pip failure"

    - name: "{% if 'github_repo' in package %}{{package.github_repo}}{% else %}(NOT APPLICABLE){% endif %} - Checking whether codemeta.json is provided"
      stat:
        path: "{{ source_path }}/{% if 'github_repo' in package %}{{package.github_repo}}{% else %}{{package.name}}{% endif %}/codemeta.json"
      register: have_codemeta
      changed_when: False
      when: "'github_repo' in package or 'name' in package"


    - name: "{% if 'pip' in package %}{{package.pip}}{% else %}{{package.github_repo}}{% endif %} -  Register software metadata (github)"
      include_role:
          name: lamachine-register
      vars:
          codemeta: "{% if have_codemeta.stat.exists %}{{ source_path }}/{{package.github_repo}}/codemeta.json{% endif %}"
          metadata_defaults:
             identifier: "{% if 'pip' in package %}{{package.pip|lower}}{% else %}{{ package.github_repo|lower }}{% endif %}"
             name: "{% if 'pip' in package %}{{package.pip}}{% else %}{{ package.github_repo }}{% endif %}"
             codeRepository: "{% if 'github_repo' in package %}https://github.com/{{package.github_user}}/{{package.github_repo}}{% endif %}"
             producer: "{% if 'github_user' in package %}{% if package.github_user in github_clst_users %}{{metadata_producer_clst}}{% else %}{{metadata_producer_unknown}}{% endif %}{% else %}{{metadata_producer_unknown}}{% endif %}"
      when: do_registration is defined and do_registration|bool and 'github_repo' in package

    - name: "{% if 'pip' in package %}{{package.pip}}{% else %}{{package.name}}{% endif %} -  Register software metadata (other git)"
      include_role:
          name: lamachine-register
      vars:
          codemeta: "{% if have_codemeta.stat.exists %}{{ source_path }}/{{package.name}}/codemeta.json{% endif %}"
          metadata_defaults:
             identifier: "{% if 'pip' in package %}{{package.pip|lower}}{% else %}{{ package.name|lower }}{% endif %}"
             name: "{% if 'pip' in package %}{{package.pip}}{% else %}{{ package.name }}{% endif %}"
             codeRepository: "{{package.git_url}}"
      when: do_registration is defined and do_registration|bool and 'name' in package and 'git_url' in package


